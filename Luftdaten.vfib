{"name":"Luftdaten","type":"virtual_device","properties":{"deviceIcon":1021,"categories":"[\"climate\"]","currentIcon":"1021","log":"","logTemp":"","mainLoop":"local device = fibaro:getSelfId();\nlocal ipaddress = fibaro:getValue(device, \"IPAddress\");\nlocal port = fibaro:getValue(device, \"TCPPort\");\nlocal measuringInterval = 145;\nlocal requestRetryInterval = 10;\nFIBARO = Net.FHttp(ipaddress, port)\nlocal response = FIBARO:GET(\"/data.json\");\n\nfunction getResponse()\n  return json.decode(response);\nend\n\nfunction calculateAqi(pm25)\n  local aqiBreakpoints = {\n    {aqi = 0, pm25 = 0},\n    {aqi = 51, pm25 = 15.5},\n    {aqi = 101, pm25 = 40.5},\n    {aqi = 151, pm25 = 65.5},\n    {aqi = 201, pm25 = 150.5},\n    {aqi = 301, pm25 = 250.5}\n  };\n\n  function getCeiling(pm25)\n    for i = 1, #aqiBreakpoints, 1 do\n      if (pm25 < aqiBreakpoints[i].pm25) then\n        return aqiBreakpoints[i];\n      end\n    end\n  end\n\n  function getFloor(pm25)\n    for i = #aqiBreakpoints, 1, -1 do\n      if (pm25 >= aqiBreakpoints[i].pm25) then\n        return aqiBreakpoints[i];\n      end\n    end\n  end\n\n  local max = getCeiling(pm25);\n  local min = getFloor(pm25);\n\n  if (type(min) ~= 'nil' and type(max) ~= 'nil') then\n    return math.floor((pm25 - min.pm25) * (max.aqi - min.aqi) / (max.pm25 - min.pm25) + min.aqi);\n  else\n    return aqiBreakpoints[#aqiBreakpoints].aqi;\n  end\nend\n\nlocal requestSucceeded, jsonResponse = pcall(getResponse);\n\nif (requestSucceeded) then\n  for _, sensor in ipairs(jsonResponse.sensordatavalues) do\n    local valueType = sensor.value_type;\n    local value = sensor.value;\n    local unit = \"\";\n\n    if (valueType == \"SDS_P1\" or valueType == \"SDS_P2\") then\n      unit = \" µg/m³\";\n      if (valueType == \"SDS_P2\") then\n        fibaro:call(device, \"setProperty\", \"ui.aqi.value\", calculateAqi(tonumber(value)));\n      end\n    elseif(valueType == \"temperature\" or valueType == \"BME280_temperature\") then\n      unit = \"°C\";\n    elseif(valueType == \"humidity\" or valueType == \"BME280_humidity\") then\n      unit = \" %\";\n    elseif(valueType == \"BME280_pressure\") then\n      value = math.floor(value)/100;\n      unit = \" hPa\";\n    end\n\n    fibaro:call(device, \"setProperty\", \"ui.\" .. sensor.value_type:gsub(\"_\", \"\") .. \".value\", value .. unit);\n  end\n\n  fibaro:sleep(measuringInterval * 1000);\nelse\n  fibaro:sleep(requestRetryInterval * 1000);\nend\n","ui.BME280humidity.value":"47.89 %","ui.BME280pressure.value":"1000 hPa","ui.BME280temperature.value":"16.24°C","ui.SDSP1.value":"5.60 µg/m³","ui.SDSP2.value":"2.17 µg/m³","ui.aqi.value":"7","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"AQI","name":"aqi","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"PM10","name":"SDSP1","favourite":false,"main":false}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"PM2.5","name":"SDSP2","favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"Temperatura","name":"BME280temperature","favourite":false,"main":false}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"Wilgotność","name":"BME280humidity","favourite":false,"main":false}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"Ciśnienie","name":"BME280pressure","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}
